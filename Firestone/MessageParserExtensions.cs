using System.IO;
using Google.Protobuf;

namespace Firestone
{
    internal static class MessageParserExtensions
    {
        /// <summary>
        /// This is an extension method for Google.Protobuf.MessageParser<T> to handle the SilentOrbit-style protobuf streams
        /// generated by the Hearthstone servers. These streams use a 2-byte length prefix followed by the protobuf message.
        /// </summary>
        internal static T ParseInt16DelimitedFrom<T>(this MessageParser<T> parser, Stream input) where T : IMessage<T> {
            ProtoPreconditions.CheckNotNull(input, "input");
            var size = (input.ReadByte() << 8) + input.ReadByte();
            var buffer = new byte[size];
            input.Read(buffer, 0, size);
            return parser.ParseFrom(buffer);
        }

        /// <summary>
        /// This is an extension method for Google.Protobuf.MessageParser<T> to handle reading the next message with
        /// a pre-determined length from a stream. The standard ParseFrom<T> method reads until the end of the stream.
        /// </summary>
        internal static T ParseFrom<T>(this MessageParser<T> parser, Stream input, int bytesToRead) where T : class, IMessage<T> {
            return ParseFrom((MessageParser) parser, input, bytesToRead) as T;
        }

        /// <summary>
        /// This is an extension method for Google.Protobuf.MessageParser to handle reading the next message with
        /// a pre-determined length from a stream. The standard ParseFrom method reads until the end of the stream.
        /// </summary>
        internal static IMessage ParseFrom(this MessageParser parser, Stream input, int bytesToRead) {
            var buf = new byte[bytesToRead];
            input.Read(buf, 0, bytesToRead);
            return parser.ParseFrom(buf);
        }
    }
}